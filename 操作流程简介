相关介绍：https://juejin.cn/post/6844903598522908686

几个核心的存储区：
    本地：【工作区】 ｜ git管理区【暂存区、本地仓库、远端仓库】


操作步骤
AS新建工程

工作区操作命令：
    git init 【作用：使用git管理项目。将项目初始化为git仓库，用来跟踪管理。只是确定项目可追踪，还没有真正添加任何可追踪文件】
               会生成.git隐藏文件夹，.git文件夹也被称作版本库
    git add . 【作用：add代表需要追踪的文件[也就是添加到暂存区]，.代表所有文件】
    git commit 【作用：提交到本地仓库】
    git commit 文件名【作用提交某一个文件，文件名需要加路径, git log来获取】

    git status 【查看所有文件状态，会列出以下几种】
        Changes to be committed: 【索引中变更的文件】
          (use "git restore --staged <file>..." to unstage)
                new file:   "\345\207\240\344\270\252\346\240\270\345\277\203\345\255\230\345\202\250\345\214\272.png"
                new file:   "\346\240\270\345\277\203\345\255\230\345\202\250\345\214\272\347\273\206\350\212\202.png"

        Changes not staged for commit:【未添加索引的文件 - 工作区已有文件修改】
          (use "git add <file>..." to update what will be committed)
          (use "git restore <file>..." to discard changes in working directory)
                modified:   .idea/workspace.xml

        Untracked files: 【未添加索引的文件 - 工作区新增文件】
          (use "git add <file>..." to include in what will be committed)
                .gradle/
                .idea/GitDemo.iml

    git diff 【作用：指定文件在工作区和暂存区上差异比较】

    git stash 将当前本地代码交给git暂存起来，便于在一些情况下切换到其他分支开发，或者临时保存
    git stash list  查看当前所有的储藏
    git stash apply  应用最新的储藏
    git stash apply stash@{2}  如果想应用更早的储藏
    【注：有时候会发生无法暂存的情况，可能本地某个文件可能冲突，需要自己视情况去 提交 还是 revert 】
    AS自带的stash没发生上述现象 ｜ 触发位置：toolbar - git

    取消索引 ｜ 删除相关
        git reset HEAD <file>           【取消暂存区已经暂存的文件，只add未commit的文件】
        git rm --cached readme1.txt     【删除readme1.txt的跟踪，并保留在本地。已经commit的文件】
        git rm --f readme1.txt          【删除readme1.txt的跟踪，并且删除本地文件】

        git checkout .idea/workspace.xml 【删除已经索引文件的修改变动】
          AS对应操作：rollback


        【移除上一次提交】
        【移除上一次合并】
        【将多次提交合并到一次】
        revert
        reset
        restore
        check-pick
        git rebase
        git merge
        git ignore

    git commit --amend 【修改上次commit提交记录信息】

    git log 【显示所有提交过的版本信息】
        commit 08a37d32ea96ddb834e9471407c96650aa55ab5b (HEAD -> master)
        Author: zhangtuo <zhangtuodd@163.com>
        Date:   Sun Dec 19 00:05:02 2021 +0800
            提交信息备注

    git log --pretty=oneline 【只显示显示版本号和提交时的备注信息】
        08a37d32ea96ddb834e9471407c96650aa55ab5b  提交信息备注

    git reflog 【可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）】
        08a37d3 (HEAD -> master) HEAD@{0}: reset: moving to 08a37d3
        21b40e1 HEAD@{1}: reset: moving to 21b40e107145c442160256eb2b91f99055176186
        08a37d3 (HEAD -> master) HEAD@{2}: commit: git命令提交
        21b40e1 HEAD@{3}: reset: moving to 21b40e107145c442160256eb2b91f99055176186

    回滚到上一次提交commit,撤销提交记录，且保留当前本地变动
    命令操作：
        git reset --hard commit版本号  【git reflog 前面显示的版本号 - 08a37d3】
    AS操作：
        底部导航栏 - git - 右键上一次提交记录 - Undo commit


    git多次提交合并为一次提交(如下：将3次提交记录合并为1次提交)
        git rebase -i HEAD~3   执行完后出现以下窗口信息
           pick 925e4c0 测试把多个commit提交记录合并一个commit。提交test-3
           pick 86f832e 测试把多个commit提交记录合并一个commit。提交test-2
           pick 336bbac 测试把多个commit提交记录合并一个commit。提交test-1
        执行后会进入合并过程, 把除了第一个的pick其他全部改为s
             pick 925e4c0 测试把多个commit提交记录合并一个commit。提交test-3
             s 86f832e 测试把多个commit提交记录合并一个commit。提交test-2
             s 336bbac 测试把多个commit提交记录合并一个commit。提交test-1
        然后wq保存, 保存后会出现另一个界面, 合并修改这几次提交的commit信息
             #This is a combination of 3 commits
             #This is ths 1st commit message:
                你的合并注释信息
             #Please enter the commit message for your changes.....
        一般都是把中间的注释干掉, 然后保留我之前的commit


    测试把多个commit提交记录合并一个commit。提交test-1
    测试把多个commit提交记录合并一个commit。提交test-2
    测试把多个commit提交记录合并一个commit。提交test-3


    git忽略文件 【只需要在对应.gitignore文件添加规则即可，再把gitignore文件 索引+提交】
        已经commit过的配置文件的可删除后在添加忽略即可

1、工程添加到git，忽略对应文件
2、使用命令来新建分支，执行相关命令